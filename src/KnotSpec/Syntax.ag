
module {KnotSpec.Syntax}
{ module KnotSpec.Syntax.Core
, module KnotSpec.Syntax
}
{}

imports
{
import KnotSpec.Syntax.Core
import Data.Map (Map)
}

--  __  __     _
-- |  \/  |___| |_ __ _ _ _  __ _ _ __  ___ ___
-- | |\/| / -_)  _/ _` | ' \/ _` | '  \/ -_|_-<
-- |_|  |_\___|\__\__,_|_||_\__,_|_|_|_\___/__/

type Name      = (NameRoot,Suffix)
type NameRoots = [NameRoot]
type Names     = [Name]

data TypeName
  | TN tn :: String
deriving TypeName : Eq,Ord,Read,Show

--  ___              _  __ _         _   _
-- / __|_ __  ___ __(_)/ _(_)__ __ _| |_(_)___ _ _
-- \__ \ '_ \/ -_) _| |  _| / _/ _` |  _| / _ \ ' \
-- |___/ .__/\___\__|_|_| |_\__\__,_|\__|_\___/_||_|
--     |_|

data TermSpec
  | TermSpec
      tsNamespaceDecls         ::  NamespaceDecls
      tsSortDecls              ::  SortDecls
      tsFunDecls               ::  FunDecls
      tsEnvDecls               ::  EnvDecls
      tsRelDecls               ::  RelationDecls
deriving TermSpec : Eq,Ord,Read,Show

--  _  _
-- | \| |__ _ _ __  ___ ____ __  __ _ __ ___ ___
-- | .` / _` | '  \/ -_|_-< '_ \/ _` / _/ -_|_-<
-- |_|\_\__,_|_|_|_\___/__/ .__/\__,_\__\___/__/
--                        |_|

type NamespaceDecls = [NamespaceDecl]
type MbString = maybe String
data NamespaceDecl
  | NamespaceDecl
      nsdTypeName              ::  TypeName
      nsdNameRoots             ::  NameRoots
      nsdSort                  ::  TypeName
      nsdDirectives            ::  NamespaceDirectives
deriving NamespaceDecl : Eq,Ord,Read,Show

type NamespaceDirectives = [NamespaceDirective]
data NamespaceDirective
  | NamespaceShift
      nsdShiftName             ::  String
  | NamespaceSubst
      nsdSubstName             ::  String
  | NamespaceWeaken
      nsdWeakenName            ::  String
  | NamespaceCutoff
      nsdCutoffName            ::  String
deriving NamespaceDirective : Eq,Ord,Read,Show

--  ___          _
-- / __| ___ _ _| |_ ___
-- \__ \/ _ \ '_|  _(_-<
-- |___/\___/_|  \__/__/

type SortDecls = [SortDecl]
data SortDecl
  | SortDecl
      sortTypeName             ::  TypeName
      sortNameRoots            ::  NameRoots
      sortCtors                ::  CtorDecls
deriving SortDecl : Eq,Ord,Read,Show

type CtorDecls = [CtorDecl]
data CtorDecl
  | CtorVar
      ctorName                 ::  CtorName
      ctorMetavar              ::  Name
  | CtorTerm
      ctorName                 ::  CtorName
      ctorFields               ::  FieldDecls
deriving CtorDecl : Eq,Ord,Read,Show

type FieldDecls = [FieldDecl]
data FieldDecl
  | FieldDecl
      fieldBindSpec            ::  BindSpec
      fieldName                ::  Name
deriving FieldDecl : Eq,Ord,Read,Show

--  ___ _         _
-- | _ |_)_ _  __| |____ __  ___ __ ___
-- | _ \ | ' \/ _` (_-< '_ \/ -_) _(_-<
-- |___/_|_||_\__,_/__/ .__/\___\__/__/
--                    |_|

-- Heterogeneous list of items
type BindSpec = [VleItem]
-- Homogeneous list of items
type Vle = [VleItem]
data VleItem
  | VleBinding
      vleMetavar    ::  Name
  | VleCall
      vleFunName    ::  FunName
      vleField      ::  Name
deriving VleItem : Eq,Ord,Read,Show

--  ___             _   _
-- | __|  _ _ _  __| |_(_)___ _ _  ___
-- | _| || | ' \/ _|  _| / _ \ ' \(_-<
-- |_| \_,_|_||_\__|\__|_\___/_||_/__/

type FunDecls = [FunDecl]
data FunDecl
  | FunDecl
      fdName   :: FunName
      fdSource :: TypeName
      fdTarget :: TypeNames
      fdCases  :: FunCases
deriving FunDecl : Eq, Ord,Read,Show

type FunCases = [FunCase]
data FunCase
  | FunCase
      fcCtor   :: CtorName
      fcFields :: Names
      fcRhs    :: Vle
deriving FunCase : Eq, Ord,Read,Show

--  ___         _                            _
-- | __|_ ___ _(_)_ _ ___ _ _  _ __  ___ _ _| |_ ___
-- | _|| ' \ V / | '_/ _ \ ' \| '  \/ -_) ' \  _(_-<
-- |___|_||_\_/|_|_| \___/_||_|_|_|_\___|_||_\__/__/

type EnvDecls = [EnvDecl]
data EnvDecl
  | EnvDecl
      envTypeName   :: TypeName
      envNameRoots  :: NameRoots
      envCtors      :: EnvCtors
deriving EnvDecl : Eq,Ord,Read,Show

type EnvCtors = [EnvCtor]
data EnvCtor
  | EnvCtorNil
      envCtorName      :: CtorName
  | EnvCtorCons
      envCtorName      :: CtorName
      envCtorMetavar   :: Name
      envCtorFields    :: Names
deriving EnvCtor : Eq, Ord,Read,Show

--  ___     _      _   _
-- | _ \___| |__ _| |_(_)___ _ _  ___
-- |   / -_) / _` |  _| / _ \ ' \(_-<
-- |_|_\___|_\__,_|\__|_\___/_||_/__/

type MbTypeName = maybe TypeName
type TypeNames = [TypeName]
type RelationDecls = [RelationDecl]
data RelationDecl
  | RelationDecl
      relEnv      :: MbTypeName
      relTypeName :: TypeName
      relIndices  :: TypeNames
      relRules    :: Rules
deriving RelationDecl : Eq,Ord,Read,Show

type Rules = [Rule]
data Rule
  | Rule
      ruleName       :: CtorName
      rulePremises   :: Formulas
      ruleConclusion :: Judgement
      ruleBindings   :: RuleBindings
deriving Rule : Eq,Ord,Read,Show

type RuleBindings = [RuleBinding]
data RuleBinding
  | RuleBinding
      rbMetavar      :: Name
      rbTerms        :: SymbolicTerms
deriving RuleBinding : Eq,Ord,Read,Show

type Formulas = [Formula]
data Formula
  | FormBinding
      fmlBinding     :: RuleBinding
  | FormJudgement
      fmlBindings    :: RuleBindings
      fmlJudgement   :: Judgement
deriving Formula : Eq,Ord,Read,Show

type Judgements = [Judgement]
data Judgement
  | Judgement
      jmtTypeName    :: TypeName
      jmtTerms       :: SymbolicTerms
deriving Judgement : Eq,Ord,Read,Show

--  ___            _         _ _      _
-- / __|_  _ _ __ | |__  ___| (_)__  | |_ ___ _ _ _ __  ___
-- \__ \ || | '  \| '_ \/ _ \ | / _| |  _/ -_) '_| '  \(_-<
-- |___/\_, |_|_|_|_.__/\___/_|_\__|  \__\___|_| |_|_|_/__/
--      |__/

type SymbolicTerms = [SymbolicTerm]
data SymbolicTerm
  | SymVar
      stVar          :: Name
  | SymCtorVar
      stCtor         :: CtorName
      stMetavar      :: Name
  | SymCtorTerm
      stCtor         :: CtorName
      stFields       :: SymbolicTerms
  | SymSubst
      stVar          :: Name
      stSubstitute   :: SymbolicTerm
      stSubstitutee  :: SymbolicTerm
deriving SymbolicTerm : Eq,Ord,Read,Show

--  _____                         _
-- |_   _|  _ _ __  ___   ___ ___| |_ ___
--   | || || | '_ \/ -_) (_-</ -_)  _(_-<
--   |_| \_, | .__/\___| /__/\___|\__/__/
--       |__/|_|

set BelowSortDecl =
  CtorDecls CtorDecl

set BelowFunDecl =
  FunCases FunCase

set BelowEnvDecl =
  EnvCtors EnvCtor

set BelowRelationDecl =
  Rules Rule
  RuleBindings RuleBinding
  Formulas Formula
  Judgements Judgement
  SymbolicTerms SymbolicTerm

set BelowTermSpec =
  NamespaceDecls NamespaceDecl
  SortDecls SortDecl BelowSortDecl
  FunDecls FunDecl BelowFunDecl
  EnvDecls EnvDecl BelowEnvDecl
  RelationDecls RelationDecl BelowRelationDecl
  FieldDecls FieldDecl
  BindSpec
  Vle VleItem
  Names Name
  TypeNames MbTypeName TypeName
  MENamespaceNameRoots
  MENamespaceTypeName
  MESortNameRoots
  MESortTypeName
  MEEnvNameRoots
  MEEnvTypeName
  MENamespaceCtor
  MERelationEnv

--  __  __     _                      _                            _
-- |  \/  |___| |_ __ _   ___ _ ___ _(_)_ _ ___ _ _  _ __  ___ _ _| |_ ___
-- | |\/| / -_)  _/ _` | / -_) ' \ V / | '_/ _ \ ' \| '  \/ -_) ' \  _(_-<
-- |_|  |_\___|\__\__,_| \___|_||_\_/|_|_| \___/_||_|_|_|_\___|_||_\__/__/

-- Contains a mapping from canonical namespacenameroots to aliases.
type MENamespaceNameRoots     = map {TypeName} NameRoots
-- Maps namespacenameroots to the canonical namespacenameroot.
type MENamespaceTypeName      = map {NameRoot} TypeName

-- Contains a mapping from typenames to fieldnameroots for that sort.
type MESortNameRoots          = map {TypeName} NameRoots
-- Maps fieldnameroots to the typename.
type MESortTypeName           = map {NameRoot} TypeName

-- Contains a mapping from canonical envnameroots to aliases.
type MEEnvNameRoots           = map {TypeName} NameRoots
-- Maps envnameroots to the canonical envnameroot.
type MEEnvTypeName            = map {NameRoot} TypeName

-- Maps namespacenames to (sortname,ctorvarname)
type MENamespaceCtor          = map {TypeName} {(TypeName,CtorName)}

-- Maps namespacenames to (sortname,ctorvarname)
type MEFunType                = map {FunName} {(TypeName,TypeNames)}

-- Maps relationtypenames to envtypenames
type MERelationEnv            = map {TypeName} {TypeName}
